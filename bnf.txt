
<program> ::= "program" <identifier> ; <block> . "over" "out"

//identifier ds finds you letters and digits

    <identifier> ::= <letter > {<letter or digit>}

        <letter or digit> ::= <letter> | <digit>

//block: meat and bones

    <block> ::= <type definition part> <variable declaration part> <procedure declaration part >

    //type only need scalar type; no pointers , data structures and user definede
    // scalar type = int,floats,double...

        <type definition part> ::= <empty> | "type" <type definition> {;<type definition>};

            <type definition> ::= <identifier> "=" <type>

                <type> ::= <simple type>

                    <simple type> ::= <scalar type> | <type identifier>

                        <type identifier> ::= <identifier>

                        <scalar type> ::= (<identifier> {,<identifier>})

        <variable declaration part> ::= <empty> | "var" <variable declaration> {; <variable declaration>} ;

            <variable declaration> ::= <identifier> {,<identifier>} ":" <type>

        //procedure equal function for my language purpose
        <procedure declaration part> ::= <procedure declaration>

            <procedure declaration> ::= <procedure heading> <block>

                <procedure heading> ::= procedure <identifier> ";" |
                procedure <identifier> ( <formal parameter section> {;<formal parameter section>} );

                    <formal parameter section> ::= <parameter group> | var <parameter group> |
                    function <parameter group> | procedure <identifier> { , <identifier>}

                        <parameter group> ::= <identifier> {, <identifier>} : <type identifier>